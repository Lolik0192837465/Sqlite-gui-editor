import sys
import sqlite3
import csv
import os
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QPushButton, QLineEdit, QLabel, QMessageBox, QComboBox, QFileDialog
)
from PyQt5.QtGui import QPalette, QColor, QFont
from PyQt5.QtCore import Qt
from openpyxl import Workbook

DB_PATH = "example.db"

# ---------------- –ë–ê–ó–ê –î–ê–ù–ù–´–• ---------------- #
def initialize_database():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, email TEXT)")
    cursor.execute("CREATE TABLE IF NOT EXISTS dogs (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, breed TEXT)")
    cursor.execute("CREATE TABLE IF NOT EXISTS cats (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, color TEXT)")
    conn.commit()
    conn.close()


# ---------------- –¢–Å–ú–ù–ê–Ø –¢–ï–ú–ê ---------------- #
def apply_dark_theme(app):
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor("#FFFFFF"))  # –ë–µ–ª—ã–π —Ñ–æ–Ω
    palette.setColor(QPalette.WindowText, QColor("#000000"))  # –ß—ë—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    palette.setColor(QPalette.Base, QColor("#FFFFFF"))
    palette.setColor(QPalette.AlternateBase, QColor("#F5F5F5"))
    palette.setColor(QPalette.Text, QColor("#000000"))  # –ß—ë—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    palette.setColor(QPalette.Button, QColor("#F0F0F0"))
    palette.setColor(QPalette.ButtonText, QColor("#000000"))
    app.setPalette(palette)


# ---------------- –ò–ù–¢–ï–†–§–ï–ô–° ---------------- #
class DatabaseGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üìã SQLite –ú–µ–Ω–µ–¥–∂–µ—Ä")
        self.setGeometry(200, 100, 950, 600)
        self.setFont(QFont("Segoe UI", 10))
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)
        self.current_table = "users"
        self.init_ui()
        self.run_select_query()

    def init_ui(self):
        top_layout = QHBoxLayout()

        self.table_selector = QComboBox()
        self.table_selector.addItems(["üë§ Users", "üê∂ Dogs", "üê± Cats"])
        self.table_selector.currentTextChanged.connect(self.update_query)

        self.query_input = QLineEdit("SELECT * FROM users")
        self.query_button = QPushButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å")
        self.query_button.clicked.connect(self.run_select_query)

        top_layout.addWidget(QLabel("üìÅ –¢–∞–±–ª–∏—Ü–∞:"))
        top_layout.addWidget(self.table_selector)
        top_layout.addWidget(self.query_input)
        top_layout.addWidget(self.query_button)

        self.layout.addLayout(top_layout)

        # –ö–ù–û–ü–ö–ò
        btn_layout = QHBoxLayout()
        self.add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        self.csv_btn = QPushButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        self.excel_btn = QPushButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")

        self.add_btn.clicked.connect(self.add_record)
        self.save_btn.clicked.connect(self.save_edits)
        self.csv_btn.clicked.connect(self.export_csv)
        self.excel_btn.clicked.connect(self.export_excel)

        for btn in [self.add_btn, self.save_btn, self.csv_btn, self.excel_btn]:
            btn.setStyleSheet("padding: 6px;")
            btn_layout.addWidget(btn)

        self.layout.addLayout(btn_layout)

        # –¢–ê–ë–õ–ò–¶–ê
        self.table = QTableWidget()
        self.table.setEditTriggers(QTableWidget.DoubleClicked | QTableWidget.SelectedClicked)
        self.layout.addWidget(self.table)

    def update_query(self, selection):
        self.current_table = selection.split()[1].lower()
        self.query_input.setText(f"SELECT * FROM {self.current_table}")
        self.run_select_query()

    def run_select_query(self):
        query = self.query_input.text()
        try:
            conn = sqlite3.connect(DB_PATH)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute(query)
            rows = cursor.fetchall()
            self.populate_table(rows)
            conn.close()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def populate_table(self, rows):
        if not rows:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—Ä–æ–∫, –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute(f"PRAGMA table_info({self.current_table})")
            columns_info = cursor.fetchall()
            conn.close()

            headers = [col[1] for col in columns_info]  # –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫

            self.table.setColumnCount(len(headers))
            self.table.setHorizontalHeaderLabels(headers)
            self.table.setRowCount(0)  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å—Ç—å
            return

        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –µ—Å—Ç—å ‚Äî –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        headers = rows[0].keys()
        self.table.setColumnCount(len(headers))
        self.table.setHorizontalHeaderLabels(headers)
        self.table.setRowCount(len(rows))
        for row_index, row in enumerate(rows):
            for col_index, column in enumerate(headers):
                self.table.setItem(row_index, col_index, QTableWidgetItem(str(row[column])))

    def add_record(self):
        col_count = self.table.columnCount()
        self.table.insertRow(self.table.rowCount())
        for col in range(col_count):
            self.table.setItem(self.table.rowCount() - 1, col, QTableWidgetItem(""))

    def save_edits(self):
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            headers = [self.table.horizontalHeaderItem(i).text() for i in range(self.table.columnCount())]

            cursor.execute(f"DELETE FROM {self.current_table}")

            for row in range(self.table.rowCount()):
                values = []
                for col in range(self.table.columnCount()):
                    item = self.table.item(row, col)
                    values.append(item.text() if item else "")
                placeholders = ", ".join("?" for _ in values)
                cursor.execute(f"INSERT INTO {self.current_table} ({', '.join(headers)}) VALUES ({placeholders})", values)

            conn.commit()
            conn.close()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", str(e))

    def export_csv(self):
        path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ CSV", f"{self.current_table}.csv", "CSV Files (*.csv)")
        if path:
            with open(path, "w", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                headers = [self.table.horizontalHeaderItem(i).text() for i in range(self.table.columnCount())]
                writer.writerow(headers)
                for row in range(self.table.rowCount()):
                    data = [self.table.item(row, col).text() if self.table.item(row, col) else "" for col in range(self.table.columnCount())]
                    writer.writerow(data)
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "CSV —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

    def export_excel(self):
        path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ Excel", f"{self.current_table}.xlsx", "Excel Files (*.xlsx)")
        if path:
            wb = Workbook()
            ws = wb.active
            headers = [self.table.horizontalHeaderItem(i).text() for i in range(self.table.columnCount())]
            ws.append(headers)
            for row in range(self.table.rowCount()):
                data = [self.table.item(row, col).text() if self.table.item(row, col) else "" for col in range(self.table.columnCount())]
                ws.append(data)
            wb.save(path)
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "Excel —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")


# ---------------- –ó–ê–ü–£–°–ö ---------------- #
if __name__ == "__main__":
    initialize_database()
    app = QApplication(sys.argv)
    apply_dark_theme(app)
    gui = DatabaseGUI()
    gui.show()
    sys.exit(app.exec_())
